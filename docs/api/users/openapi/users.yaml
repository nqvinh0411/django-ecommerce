openapi: 3.0.0
info:
  title: Users API
  description: API cho module users
  version: 1.0.0
  contact:
    name: API Support
    email: api@example.com
servers:
- url: https://api.example.com/api/v1
  description: Production server
- url: https://staging-api.example.com/api/v1
  description: Staging server
tags:
- name: users
  description: Operations related to users
paths:
  /users:
    get:
      tags:
      - users
      summary: List all users
      description: Returns a list of users
      operationId: listUsers
      parameters:
      - name: page
        in: query
        description: Page number
        required: false
        schema:
          type: integer
          default: 1
      - name: page_size
        in: query
        description: Number of items per page
        required: false
        schema:
          type: integer
          default: 10
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: List of users
                  data:
                    type: array
                    items:
                      type: object
                  pagination:
                    type: object
                    properties:
                      count:
                        type: integer
                      page_size:
                        type: integer
                      current_page:
                        type: integer
                      total_pages:
                        type: integer
                      next:
                        type: string
                        nullable: true
                      previous:
                        type: string
                        nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  status_code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Authentication credentials were not provided.
      security:
      - BearerAuth: []
    post:
      tags:
      - users
      summary: Create a new user
      description: Creates a new user and returns its details
      operationId: createUser
      requestBody:
        description: User object that needs to be created
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: User created successfully
                  data:
                    type: object
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid input
                  errors:
                    type: object
      security:
      - BearerAuth: []
  /users/{id}:
    get:
      tags:
      - users
      summary: Get user by ID
      description: Returns a single user
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User details
                  data:
                    type: object
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  status_code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found
      security:
      - BearerAuth: []
    put:
      tags:
      - users
      summary: Update user
      description: Updates an existing user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: ID of user to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: User object that needs to be updated
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    type: object
      security:
      - BearerAuth: []
    delete:
      tags:
      - users
      summary: Delete user
      description: Deletes a user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: ID of user to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '204':
          description: Deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: integer
                    example: 204
                  message:
                    type: string
                    example: User deleted successfully
      security:
      - BearerAuth: []
components:
  schemas: {}
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
