"""
Django settings for e_commerce project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!(5lsz%*gsr#gavx28%m9jhapnc5p1mmy_!o7+c$-ot*!2538c'

# JWT settings
JWT_SECRET_KEY = SECRET_KEY  # Sử dụng cùng SECRET_KEY với Django, có thể thay đổi trong production
JWT_ALGORITHM = 'HS256'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',

    # Core apps
    'core',
    'api',

    # Business apps
    'users',
    'cart',
    'notifications',
    'orders',
    'payments',
    'catalog',
    'products',
    'reviews',
    'customers',
    'inventory',
    'promotions',
    'wishlist',
    'reports',
    'shipping',
    'settings',
    'pages',
    'support',
    'hrm',
    'workflow',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'core.middleware.csrf_exempt_api.CsrfExemptApiMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'core.middleware.jwt_auth.JWTAuthenticationMiddleware',  # Middleware xác thực JWT
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.response.StandardizedResponseMiddleware',
    'core.middleware.ensure_cors.EnsureCORSHeadersMiddleware',  # Middleware đảm bảo CORS headers
    'core.middleware.swagger_fix.SwaggerSchemaMiddleware',  # Middleware xử lý Swagger schema generation
]

ROOT_URLCONF = 'e_commerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'e_commerce.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'ecommerce_db',
        'USER': 'odoo',
        'PASSWORD': 'odoo',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

AUTHENTICATION_BACKENDS = [
    'users.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'users.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'core.pagination.standard.StandardResultsSetPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'core.exceptions.handlers.custom_exception_handler',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_VERSION': 'v1',
    'ALLOWED_VERSIONS': ['v1'],
}

# Simple JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}


# CORS settings - Cấu hình theo môi trường
# Để đơn giản hóa switch giữa các môi trường, sử dụng biến ENV (mặc định là 'development')
ENV = os.environ.get('DJANGO_ENV', 'development')

# Cấu hình CORS chung
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Cấu hình CORS theo môi trường
if ENV == 'production':
    CORS_ALLOWED_ORIGINS = [
        # Thêm domain chính thức của production
        'https://your-production-domain.com',
        'https://www.your-production-domain.com',
    ]
    CORS_ALLOW_ALL_ORIGINS = False
elif ENV == 'uat':
    CORS_ALLOWED_ORIGINS = [
        # Thêm domain UAT
        'https://uat.your-domain.com',
        'http://192.168.100.16:3000',  # Giữ lại IP nội bộ nếu UAT vẫn chạy trong mạng nội bộ
    ]
    CORS_ALLOW_ALL_ORIGINS = False
else:  # development
    CORS_ALLOWED_ORIGINS = [
        'http://localhost:3000',
        'http://127.0.0.1:3000',
        'http://192.168.100.16:3000',
    ]
    # Có thể bật tùy chọn này trong môi trường development nếu cần
    CORS_ALLOW_ALL_ORIGINS = False

# URL configuration
APPEND_SLASH = False

# Spectacular API documentation settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'E-commerce API',
    'DESCRIPTION': 'API documentation for E-commerce platform, organized by modules.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'displayOperationId': False,
        'displayRequestDuration': True,
        'filter': True,
        'tryItOutEnabled': True,
        'defaultModelsExpandDepth': 2,
        'defaultModelExpandDepth': 2,
        'docExpansion': 'list',
        'tagsSorter': 'alpha',
        'operationsSorter': 'alpha',
    },
    
    'SCHEMA_COERCE_METHOD_NAMES': {
        'retrieve': 'get',
        'list': 'list',
        'create': 'create',
        'update': 'update',
        'partial_update': 'partial_update',
        'destroy': 'delete',
    },
    
    'TAGS': [
        {
            'name': 'Authentication',
            'description': 'API endpoints for user authentication and authorization'
        },
        {
            'name': 'Products',
            'description': 'Product catalog management endpoints'
        },
        {
            'name': 'Categories',
            'description': 'Product category management endpoints'
        },
        {
            'name': 'Cart',
            'description': 'Shopping cart management endpoints'
        },
        {
            'name': 'Orders',
            'description': 'Order processing and management endpoints'
        },
        {
            'name': 'Customers',
            'description': 'Customer account management endpoints'
        },
        {
            'name': 'Users',
            'description': 'User management and profile endpoints'
        },
        {
            'name': 'Payments',
            'description': 'Payment processing endpoints'
        },
        {
            'name': 'Shipping',
            'description': 'Shipping and delivery management endpoints'
        },
        {
            'name': 'Inventory',
            'description': 'Inventory and stock management endpoints'
        },
        {
            'name': 'Reviews',
            'description': 'Product review and rating endpoints'
        },
        {
            'name': 'Wishlist',
            'description': 'User wishlist management endpoints'
        },
        {
            'name': 'Promotions',
            'description': 'Discount and promotion management endpoints'
        },
        {
            'name': 'Notifications',
            'description': 'Notification system endpoints'
        },
        {
            'name': 'Support',
            'description': 'Customer support and ticket system endpoints'
        },
        {
            'name': 'Reports',
            'description': 'Analytics and reporting endpoints'
        },
        {
            'name': 'Settings',
            'description': 'Application configuration endpoints'
        },
        {
            'name': 'HRM',
            'description': 'Human Resource Management endpoints'
        },
        {
            'name': 'Pages',
            'description': 'Static page and content management endpoints'
        },
    ],
}

# Error handlers
HANDLER400 = 'core.exceptions.handlers.handler400'
HANDLER403 = 'core.exceptions.handlers.handler403'
HANDLER404 = 'core.exceptions.handlers.handler404'
HANDLER500 = 'core.exceptions.handlers.handler500'
